# =============================================================================
# MARYBOT - Makefile para Microservi√ßos
# =============================================================================

.PHONY: help install dev prod clean logs status stop restart build test

# Configura√ß√µes padr√£o
COMPOSE_PROJECT_NAME ?= marybot
DOCKER_COMPOSE_FILE = docker-compose.yml

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
CYAN = \033[0;36m
NC = \033[0m # No Color

# =============================================================================
# COMANDOS PRINCIPAIS
# =============================================================================

help: ## üìñ Mostrar ajuda com todos os comandos dispon√≠veis
	@echo "$(CYAN)üéå MARYBOT - Comandos Dispon√≠veis$(NC)"
	@echo "$(CYAN)================================$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## üì¶ Instalar depend√™ncias de todos os servi√ßos
	@echo "$(YELLOW)üì¶ Instalando depend√™ncias...$(NC)"
	@cd api && npm install
	@cd backend && npm install  
	@cd bot && npm install
	@cd admin-panel && npm install
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas!$(NC)"

dev: ## üöÄ Iniciar todos os servi√ßos em modo desenvolvimento
	@echo "$(GREEN)üöÄ Iniciando modo desenvolvimento...$(NC)"
	@if [ "$$OS" = "Windows_NT" ]; then \
		powershell -ExecutionPolicy Bypass -File start.ps1 -Mode dev; \
	else \
		./start.sh -m dev; \
	fi

prod: ## üê≥ Iniciar todos os servi√ßos em modo produ√ß√£o (Docker)
	@echo "$(GREEN)üê≥ Iniciando modo produ√ß√£o...$(NC)"
	@docker-compose up --build -d
	@echo "$(GREEN)‚úÖ Servi√ßos Docker iniciados!$(NC)"
	@make status

clean: ## üßπ Limpar containers, volumes e cache
	@echo "$(YELLOW)üßπ Limpando ambiente...$(NC)"
	@docker-compose down -v
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Ambiente limpo!$(NC)"

logs: ## üìä Mostrar logs de todos os servi√ßos
	@docker-compose logs -f

status: ## üìà Mostrar status dos servi√ßos
	@echo "$(CYAN)üìä Status dos Servi√ßos:$(NC)"
	@docker-compose ps

stop: ## üõë Parar todos os servi√ßos
	@echo "$(YELLOW)üõë Parando servi√ßos...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Servi√ßos parados!$(NC)"

restart: stop prod ## üîÑ Reiniciar todos os servi√ßos

build: ## üî® Rebuild de todos os containers
	@echo "$(BLUE)üî® Fazendo rebuild dos containers...$(NC)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Rebuild conclu√≠do!$(NC)"

# =============================================================================
# COMANDOS POR SERVI√áO
# =============================================================================

dev-api: ## üîó Iniciar apenas API Service em desenvolvimento
	@echo "$(BLUE)üîó Iniciando API Service...$(NC)"
	@cd api && npm run dev

dev-backend: ## üîÑ Iniciar apenas Backend Service em desenvolvimento  
	@echo "$(BLUE)üîÑ Iniciando Backend Service...$(NC)"
	@cd backend && npm run dev

dev-bot: ## ü§ñ Iniciar apenas Bot Service em desenvolvimento
	@echo "$(BLUE)ü§ñ Iniciando Bot Service...$(NC)"
	@cd bot && npm run dev

dev-admin: ## üéõÔ∏è Iniciar apenas Admin Panel em desenvolvimento
	@echo "$(BLUE)üéõÔ∏è Iniciando Admin Panel...$(NC)"
	@cd admin-panel && npm run dev

# =============================================================================
# COMANDOS DE BANCO DE DADOS
# =============================================================================

db-up: ## üêò Iniciar apenas PostgreSQL
	@echo "$(BLUE)üêò Iniciando PostgreSQL...$(NC)"
	@docker-compose up -d db

db-migrate: ## üîÑ Executar migra√ß√µes Prisma
	@echo "$(BLUE)üîÑ Executando migra√ß√µes...$(NC)"
	@cd api && npx prisma db push

db-seed: ## üå± Popular banco com dados iniciais
	@echo "$(BLUE)üå± Populando banco de dados...$(NC)"
	@cd api && npx prisma db seed

db-reset: ## ‚ö†Ô∏è Resetar banco de dados (CUIDADO!)
	@echo "$(RED)‚ö†Ô∏è ATEN√á√ÉO: Isso vai apagar todos os dados!$(NC)"
	@echo "$(YELLOW)Pressione Ctrl+C para cancelar...$(NC)"
	@sleep 5
	@cd api && npx prisma db push --force-reset
	@make db-seed

db-studio: ## üéõÔ∏è Abrir Prisma Studio para gerenciar banco
	@echo "$(CYAN)üéõÔ∏è Abrindo Prisma Studio...$(NC)"
	@cd api && npx prisma studio

# =============================================================================
# COMANDOS DE LOGS ESPEC√çFICOS
# =============================================================================

logs-api: ## üìä Logs apenas do API Service
	@docker-compose logs -f api

logs-backend: ## üìä Logs apenas do Backend Service
	@docker-compose logs -f backend

logs-bot: ## üìä Logs apenas do Bot Service
	@docker-compose logs -f bot

logs-admin: ## üìä Logs apenas do Admin Panel
	@docker-compose logs -f admin-panel

logs-db: ## üìä Logs apenas do PostgreSQL
	@docker-compose logs -f db

# =============================================================================
# COMANDOS DE MONITORAMENTO
# =============================================================================

health: ## üè• Verificar sa√∫de de todos os servi√ßos
	@echo "$(CYAN)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo "$(BLUE)API Service:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:3001/health || echo "‚ùå Indispon√≠vel"
	@echo "$(BLUE)Backend Service:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:3002/health || echo "‚ùå Indispon√≠vel"
	@echo "$(BLUE)Admin Panel:$(NC)"
	@curl -s -o /dev/null -w "Status: %{http_code}\n" http://localhost:3003 || echo "‚ùå Indispon√≠vel"

monitor: ## üìä Monitoramento cont√≠nuo dos servi√ßos
	@echo "$(CYAN)üìä Monitoramento cont√≠nuo (Ctrl+C para parar)...$(NC)"
	@watch -n 5 'docker-compose ps && echo "=== HEALTH CHECK ===" && curl -s http://localhost:3001/health && echo "" && curl -s http://localhost:3002/health'

# =============================================================================
# COMANDOS DE DESENVOLVIMENTO
# =============================================================================

lint: ## ‚ú® Executar linting em todos os servi√ßos
	@echo "$(BLUE)‚ú® Executando linting...$(NC)"
	@cd api && npm run lint || true
	@cd backend && npm run lint || true
	@cd bot && npm run lint || true
	@cd admin-panel && npm run lint || true

test: ## üß™ Executar testes (quando implementados)
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è Testes n√£o implementados ainda$(NC)"

deploy: ## üöÄ Deploy para produ√ß√£o
	@echo "$(GREEN)üöÄ Fazendo deploy...$(NC)"
	@make clean
	@make build
	@make prod
	@echo "$(GREEN)‚úÖ Deploy conclu√≠do!$(NC)"

# =============================================================================
# COMANDOS UTILIT√ÅRIOS
# =============================================================================

setup: ## ‚öôÔ∏è Configura√ß√£o inicial completa
	@echo "$(CYAN)‚öôÔ∏è Configura√ß√£o inicial do projeto...$(NC)"
	@make install
	@make db-up
	@sleep 10
	@make db-migrate
	@make db-seed
	@echo "$(GREEN)‚úÖ Configura√ß√£o inicial conclu√≠da!$(NC)"

env: ## üìù Criar arquivos .env a partir dos exemplos
	@echo "$(BLUE)üìù Criando arquivos .env...$(NC)"
	@cp -n .env.example .env 2>/dev/null || echo ".env j√° existe"
	@cp -n api/.env.example api/.env 2>/dev/null || echo "api/.env j√° existe"
	@cp -n backend/.env.example backend/.env 2>/dev/null || echo "backend/.env j√° existe"
	@cp -n bot/.env.example bot/.env 2>/dev/null || echo "bot/.env j√° existe"
	@cp -n admin-panel/.env.example admin-panel/.env 2>/dev/null || echo "admin-panel/.env j√° existe"
	@echo "$(YELLOW)‚ö†Ô∏è Configure os arquivos .env com suas credenciais!$(NC)"

update: ## üîÑ Atualizar depend√™ncias de todos os servi√ßos
	@echo "$(BLUE)üîÑ Atualizando depend√™ncias...$(NC)"
	@cd api && npm update
	@cd backend && npm update
	@cd bot && npm update
	@cd admin-panel && npm update
	@echo "$(GREEN)‚úÖ Depend√™ncias atualizadas!$(NC)"

backup: ## üíæ Fazer backup do banco de dados
	@echo "$(BLUE)üíæ Fazendo backup do banco...$(NC)"
	@mkdir -p backups
	@docker exec marybot_db pg_dump -U botuser marybot > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup criado em backups/$(NC)"

# =============================================================================
# COMANDOS DE DOCKER
# =============================================================================

docker-clean: ## üê≥ Limpeza profunda do Docker
	@echo "$(YELLOW)üê≥ Limpeza profunda do Docker...$(NC)"
	@docker system prune -a -f --volumes
	@echo "$(GREEN)‚úÖ Docker limpo!$(NC)"

docker-rebuild: ## üî® Rebuild completo sem cache
	@echo "$(BLUE)üî® Rebuild completo sem cache...$(NC)"
	@docker-compose build --no-cache --pull
	@echo "$(GREEN)‚úÖ Rebuild conclu√≠do!$(NC)"

# =============================================================================
# CONFIGURA√á√ÉO PADR√ÉO
# =============================================================================

# Comando padr√£o quando executar apenas 'make'
.DEFAULT_GOAL := help