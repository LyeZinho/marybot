// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  discordId   String   @unique
  username    String
  xp          Int      @default(0)
  coins       Int      @default(100)
  level       Int      @default(1)
  bio         String?
  lastDaily   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  characters  UserCharacter[]
  inventory   UserItem[]
  quizScores  QuizScore[]
  battlesAsUser1  Battle[] @relation("BattleUser1")
  battlesAsUser2  Battle[] @relation("BattleUser2")
  battleWins  Battle[] @relation("BattleWinner")

  @@map("users")
}

model Character {
  id          Int      @id @default(autoincrement())
  name        String
  anime       String
  rarity      Int      @default(1) // 1-5 estrelas
  attack      Int      @default(10)
  defense     Int      @default(10)
  luck        Int      @default(10)
  imageUrl    String?
  description String?
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  obtained        UserCharacter[]
  battlesAsChar1  Battle[] @relation("BattleCharacter1")
  battlesAsChar2  Battle[] @relation("BattleCharacter2")

  @@map("characters")
}

model UserCharacter {
  id           Int      @id @default(autoincrement())
  userId       String
  characterId  Int
  obtainedAt   DateTime @default(now())
  isActive     Boolean  @default(false) // Para batalhas
  
  // Relacionamentos
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character    Character @relation(fields: [characterId], references: [id])

  @@unique([userId, characterId])
  @@map("user_characters")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String   // "background", "badge", "boost", etc.
  price       Int      @default(0)
  rarity      Int      @default(1)
  imageUrl    String?
  effect      String?  // JSON string para efeitos especiais
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  inventory   UserItem[]

  @@map("items")
}

model UserItem {
  id        Int      @id @default(autoincrement())
  userId    String
  itemId    Int
  quantity  Int      @default(1)
  obtainedAt DateTime @default(now())
  
  // Relacionamentos
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
  @@map("user_items")
}

model AnimeQuestion {
  id          Int      @id @default(autoincrement())
  question    String
  optionA     String
  optionB     String
  optionC     String
  optionD     String
  correctAnswer String // "A", "B", "C", ou "D"
  difficulty  Int      @default(1) // 1-3
  anime       String?
  category    String?
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  scores      QuizScore[]

  @@map("anime_questions")
}

model QuizScore {
  id          Int      @id @default(autoincrement())
  userId      String
  questionId  Int
  isCorrect   Boolean
  answeredAt  DateTime @default(now())
  
  // Relacionamentos
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    AnimeQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_scores")
}

model Battle {
  id          Int      @id @default(autoincrement())
  user1Id     String
  user2Id     String
  character1Id Int
  character2Id Int
  winnerId    String?
  battleLog   String?  // JSON string com log da batalha
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  user1       User      @relation("BattleUser1", fields: [user1Id], references: [id])
  user2       User      @relation("BattleUser2", fields: [user2Id], references: [id])
  winner      User?     @relation("BattleWinner", fields: [winnerId], references: [id])
  character1  Character @relation("BattleCharacter1", fields: [character1Id], references: [id])
  character2  Character @relation("BattleCharacter2", fields: [character2Id], references: [id])

  @@map("battles")
}

model AnimeQuote {
  id          Int      @id @default(autoincrement())
  quote       String
  character   String
  anime       String
  createdAt   DateTime @default(now())

  @@map("anime_quotes")
}