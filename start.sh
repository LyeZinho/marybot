#!/bin/bash

# Script √∫nico de inicializa√ß√£o do MaryBot - Arquitetura Microservi√ßos
# Suporta modo desenvolvimento e produ√ß√£o com Docker

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Vari√°veis padr√£o
MODE=""
SERVICE="all"
CLEAN=false

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${WHITE}
Uso: ./start.sh [OP√á√ïES]

OP√á√ïES:
    -m, --mode MODE       Modo de execu√ß√£o: 'dev' ou 'prod'
    -s, --service SVC     Servi√ßo espec√≠fico: 'api', 'backend', 'bot', 'admin', 'all'
    -c, --clean          Limpar containers e volumes (apenas modo prod)
    -h, --help           Mostrar esta ajuda

EXEMPLOS:
    ./start.sh -m dev                    # Modo desenvolvimento
    ./start.sh -m prod                   # Modo produ√ß√£o
    ./start.sh -m dev -s api            # Apenas API Service
    ./start.sh -m prod -c               # Produ√ß√£o com limpeza
${NC}"
}

# Fun√ß√£o para mostrar header
show_header() {
    clear
    echo -e "${MAGENTA}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéå MARYBOT LAUNCHER üéå                    ‚ïë
‚ïë                   Microservices Architecture                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${NC}"
}

# Fun√ß√£o para verificar pr√©-requisitos
test_prerequisites() {
    echo -e "${CYAN}üîç Verificando pr√©-requisitos...${NC}"
    
    # Verificar Node.js
    if command -v node > /dev/null 2>&1; then
        NODE_VERSION=$(node --version)
        echo -e "${GREEN}‚úÖ Node.js: $NODE_VERSION${NC}"
    else
        echo -e "${RED}‚ùå Node.js n√£o encontrado. Instale Node.js 18+ primeiro.${NC}"
        exit 1
    fi
    
    # Verificar Docker (apenas para modo prod)
    if [ "$MODE" = "prod" ]; then
        if command -v docker > /dev/null 2>&1; then
            DOCKER_VERSION=$(docker --version)
            echo -e "${GREEN}‚úÖ Docker: $DOCKER_VERSION${NC}"
        else
            echo -e "${RED}‚ùå Docker n√£o encontrado. Instale Docker primeiro.${NC}"
            exit 1
        fi
        
        if command -v docker-compose > /dev/null 2>&1; then
            COMPOSE_VERSION=$(docker-compose --version)
            echo -e "${GREEN}‚úÖ Docker Compose: $COMPOSE_VERSION${NC}"
        else
            echo -e "${RED}‚ùå Docker Compose n√£o encontrado.${NC}"
            exit 1
        fi
    fi
    
    # Verificar arquivo .env
    if [ ! -f ".env" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Arquivo .env n√£o encontrado. Criando exemplo...${NC}"
        if [ -f ".env.example" ]; then
            cp .env.example .env
        fi
        echo -e "${YELLOW}üìù Configure o arquivo .env com suas credenciais antes de continuar.${NC}"
        echo -e "${YELLOW}   Pressione Enter ap√≥s configurar o .env${NC}"
        read -r
    else
        echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
    fi
}

# Fun√ß√£o para instalar depend√™ncias
install_dependencies() {
    echo -e "\n${CYAN}üì¶ Instalando depend√™ncias...${NC}"
    
    services=("api" "backend" "bot" "admin-panel")
    
    for svc in "${services[@]}"; do
        if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "$svc" ] || ([ "$SERVICE" = "admin" ] && [ "$svc" = "admin-panel" ]); then
            if [ -d "$svc" ]; then
                echo -e "${BLUE}üì¶ Instalando depend√™ncias: $svc${NC}"
                cd "$svc" || exit
                npm install
                if [ $? -ne 0 ]; then
                    echo -e "${RED}‚ùå Erro ao instalar depend√™ncias em $svc${NC}"
                    exit 1
                fi
                cd ..
                echo -e "${GREEN}‚úÖ Depend√™ncias instaladas: $svc${NC}"
            fi
        fi
    done
}

# Fun√ß√£o para configurar banco de dados
setup_database() {
    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "api" ]; then
        echo -e "\n${CYAN}üóÑÔ∏è Configurando banco de dados...${NC}"
        
        if [ "$MODE" = "dev" ]; then
            # Modo desenvolvimento - iniciar PostgreSQL via Docker
            echo -e "${BLUE}üêò Iniciando PostgreSQL...${NC}"
            docker-compose up -d db
            sleep 10
        fi
        
        # Executar migra√ß√µes Prisma
        echo -e "${BLUE}üîÑ Executando migra√ß√µes Prisma...${NC}"
        cd api || exit
        npx prisma db push
        npx prisma db seed
        cd ..
        echo -e "${GREEN}‚úÖ Banco de dados configurado${NC}"
    fi
}

# Fun√ß√£o para iniciar modo desenvolvimento
start_development() {
    echo -e "\n${GREEN}üöÄ Iniciando modo DESENVOLVIMENTO...${NC}"
    
    # Array para armazenar PIDs dos processos
    declare -a PIDS=()
    
    # Fun√ß√£o para cleanup
    cleanup() {
        echo -e "\n${YELLOW}üõë Parando servi√ßos...${NC}"
        for pid in "${PIDS[@]}"; do
            kill "$pid" 2>/dev/null
        done
        exit 0
    }
    
    # Capturar Ctrl+C
    trap cleanup SIGINT SIGTERM
    
    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "api" ]; then
        echo -e "${BLUE}üîó Iniciando API Service (porta 3001)...${NC}"
        cd api && npm run dev &
        PIDS+=($!)
        cd ..
        sleep 3
    fi
    
    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "backend" ]; then
        echo -e "${BLUE}üîÑ Iniciando Backend Service (porta 3002)...${NC}"
        cd backend && npm run dev &
        PIDS+=($!)
        cd ..
        sleep 3
    fi
    
    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "bot" ]; then
        echo -e "${BLUE}ü§ñ Iniciando Bot Service...${NC}"
        cd bot && npm run dev &
        PIDS+=($!)
        cd ..
        sleep 3
    fi
    
    if [ "$SERVICE" = "all" ] || [ "$SERVICE" = "admin" ]; then
        echo -e "${BLUE}üéõÔ∏è Iniciando Admin Panel (porta 3003)...${NC}"
        cd admin-panel && npm run dev &
        PIDS+=($!)
        cd ..
        sleep 3
    fi
    
    echo -e "\n${GREEN}‚úÖ Todos os servi√ßos foram iniciados!${NC}"
    echo -e "${CYAN}üåê URLs de acesso:${NC}"
    echo -e "${WHITE}   ‚Ä¢ API Service: http://localhost:3001${NC}"
    echo -e "${WHITE}   ‚Ä¢ Backend Service: http://localhost:3002${NC}"
    echo -e "${WHITE}   ‚Ä¢ Admin Panel: http://localhost:3003${NC}"
    echo -e "\n${YELLOW}üìù Logs est√£o sendo exibidos no terminal${NC}"
    echo -e "${RED}‚ùå Pressione Ctrl+C para parar todos os servi√ßos${NC}"
    
    # Aguardar indefinidamente
    wait
}

# Fun√ß√£o para iniciar modo produ√ß√£o
start_production() {
    echo -e "\n${GREEN}üöÄ Iniciando modo PRODU√á√ÉO (Docker)...${NC}"
    
    if [ "$CLEAN" = true ]; then
        echo -e "${YELLOW}üßπ Limpando containers e volumes...${NC}"
        docker-compose down -v
        docker system prune -f
    fi
    
    # Build e start com Docker Compose
    if [ "$SERVICE" = "all" ]; then
        echo -e "${BLUE}üê≥ Construindo e iniciando todos os servi√ßos...${NC}"
        docker-compose up --build -d
        
        # Aguardar servi√ßos ficarem saud√°veis
        echo -e "${YELLOW}‚è≥ Aguardando servi√ßos ficarem saud√°veis...${NC}"
        sleep 30
        
        # Verificar status dos servi√ßos
        show_services_status
        
    else
        # Iniciar servi√ßo espec√≠fico
        case $SERVICE in
            "api") SERVICE_NAME="api" ;;
            "backend") SERVICE_NAME="backend" ;;
            "bot") SERVICE_NAME="bot" ;;
            "admin") SERVICE_NAME="admin-panel" ;;
            *) SERVICE_NAME=$SERVICE ;;
        esac
        
        echo -e "${BLUE}üê≥ Iniciando servi√ßo: $SERVICE_NAME${NC}"
        docker-compose up --build -d "$SERVICE_NAME"
    fi
    
    echo -e "\n${GREEN}‚úÖ Servi√ßos Docker iniciados!${NC}"
    echo -e "${CYAN}üìä Use 'docker-compose logs -f' para ver logs${NC}"
    echo -e "${CYAN}üõë Use 'docker-compose down' para parar${NC}"
}

# Fun√ß√£o para mostrar status dos servi√ßos
show_services_status() {
    echo -e "\n${CYAN}üìä Status dos Servi√ßos:${NC}"
    
    services=(
        "marybot_db:Database:localhost:5400"
        "marybot_api:API Service:http://localhost:3001/health"
        "marybot_backend:Backend Service:http://localhost:3002/health"
        "marybot_bot:Bot Service:N/A"
        "marybot_admin:Admin Panel:http://localhost:3003"
    )
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r container_name service_name url <<< "$service_info"
        
        status=$(docker ps --filter "name=$container_name" --format "{{.Status}}" 2>/dev/null)
        if [ -n "$status" ]; then
            echo -e "${GREEN}‚úÖ $service_name: $status${NC}"
        else
            echo -e "${RED}‚ùå $service_name: N√£o executando${NC}"
        fi
    done
    
    echo -e "\n${CYAN}üåê URLs de acesso:${NC}"
    echo -e "${WHITE}   ‚Ä¢ Admin Panel: http://localhost:3003${NC}"
    echo -e "${WHITE}   ‚Ä¢ API Docs: http://localhost:3001/health${NC}"
    echo -e "${WHITE}   ‚Ä¢ Backend Status: http://localhost:3002/health${NC}"
}

# Fun√ß√£o para mostrar comandos √∫teis
show_useful_commands() {
    echo -e "${WHITE}
üìñ Comandos √∫teis do MaryBot:

üîß Desenvolvimento:
   ./start.sh -m dev                    # Iniciar todos os servi√ßos
   ./start.sh -m dev -s api            # Apenas API Service
   ./start.sh -m dev -s bot            # Apenas Bot Service

üê≥ Produ√ß√£o (Docker):
   ./start.sh -m prod                   # Todos os servi√ßos Docker
   ./start.sh -m prod -c               # Limpar e reiniciar
   
üìä Monitoramento:
   docker-compose logs -f              # Ver logs de todos os servi√ßos
   docker-compose logs -f api          # Logs apenas do API
   docker-compose ps                   # Status dos containers
   
üõë Parar servi√ßos:
   docker-compose down                 # Parar containers
   docker-compose down -v              # Parar e remover volumes
${NC}"
}

# Parse de argumentos da linha de comando
while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--mode)
            MODE="$2"
            shift 2
            ;;
        -s|--service)
            SERVICE="$2"
            shift 2
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Op√ß√£o desconhecida: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Validar argumentos obrigat√≥rios
if [ -z "$MODE" ]; then
    echo -e "${RED}‚ùå Modo √© obrigat√≥rio. Use -m dev ou -m prod${NC}"
    show_help
    exit 1
fi

if [[ "$MODE" != "dev" && "$MODE" != "prod" ]]; then
    echo -e "${RED}‚ùå Modo deve ser 'dev' ou 'prod'${NC}"
    exit 1
fi

if [[ "$SERVICE" != "all" && "$SERVICE" != "api" && "$SERVICE" != "backend" && "$SERVICE" != "bot" && "$SERVICE" != "admin" ]]; then
    echo -e "${RED}‚ùå Servi√ßo deve ser 'all', 'api', 'backend', 'bot' ou 'admin'${NC}"
    exit 1
fi

# ============================================================================
# EXECU√á√ÉO PRINCIPAL
# ============================================================================

show_header

# Verificar pr√©-requisitos
test_prerequisites

# Instalar depend√™ncias (apenas modo dev)
if [ "$MODE" = "dev" ]; then
    install_dependencies
fi

# Configurar banco de dados
setup_database

# Iniciar servi√ßos baseado no modo
case $MODE in
    "dev")
        start_development
        ;;
    "prod")
        start_production
        ;;
esac

# Mostrar informa√ß√µes √∫teis
if [ "$MODE" = "prod" ]; then
    show_services_status
fi

show_useful_commands

echo -e "\n${GREEN}üéâ MaryBot est√° pronto para uso!${NC}"