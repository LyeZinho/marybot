import config from "../../config.js";
import { getOrCreateUser, getOrCreateDungeonRun } from "../../database/client.js";

export default {
  name: "inventory",
  aliases: ["inv", "bag", "items"],
  description: "Mostra seu invent√°rio e equipamentos atuais.",
  category: "dungeon",
  usage: "inventory [page]",
  cooldown: 1500,
  
  async execute(client, message, args) {
    try {
      const discordId = message.author.id;
      const page = parseInt(args[0]) || 1;
      
      // Pegar dados do usu√°rio
      const user = await getOrCreateUser(discordId, message.author.tag);
      const dungeonRun = await getOrCreateDungeonRun(discordId);
      
      // Criar embed do invent√°rio
      const inventoryEmbed = await this.createInventoryEmbed(user, dungeonRun, page);
      
      await message.reply({ embeds: [inventoryEmbed] });
      
    } catch (error) {
      console.error("Erro no comando inventory:", error);
      
      const errorEmbed = {
        color: config.colors.error,
        title: `${config.emojis.error} Erro`,
        description: "Ocorreu um erro ao mostrar o invent√°rio. Tente novamente.",
      };
      
      await message.reply({ embeds: [errorEmbed] });
    }
  },
  
  async createInventoryEmbed(user, dungeonRun, page) {
    const classEmojis = {
      'WARRIOR': '‚öîÔ∏è',
      'MAGE': 'üîÆ',
      'ROGUE': 'üó°Ô∏è',
      'CLERIC': '‚ú®'
    };
    
    // Invent√°rio tempor√°rio at√© implementarmos sistema completo
    const tempInventory = this.getTempInventory(dungeonRun);
    const equipment = this.getTempEquipment(user.playerClass);
    
    const embed = {
      color: config.colors.primary,
      title: `üéí Invent√°rio de ${user.username}`,
      description: `${classEmojis[user.playerClass]} **${this.getClassName(user.playerClass)}** - N√≠vel ${user.level}`,
      fields: [
        {
          name: "üë§ Status do Personagem",
          value: `**HP:** ${dungeonRun.health}/${dungeonRun.maxHealth}\n**Mana:** ${user.mana}/${user.maxMana}\n**Moedas:** ${user.coins} ü™ô`,
          inline: true
        },
        {
          name: "üìä Atributos",
          value: `**ATK:** ${user.attack}\n**DEF:** ${user.defense}\n**VEL:** ${user.speed}`,
          inline: true
        },
        {
          name: "‚öîÔ∏è Equipamentos",
          value: this.formatEquipment(equipment),
          inline: false
        },
        {
          name: "üéí Itens no Invent√°rio",
          value: this.formatInventoryItems(tempInventory, page),
          inline: false
        },
        {
          name: "üéØ Habilidades Ativas",
          value: this.formatActiveSkills(user.playerClass),
          inline: false
        }
      ],
      footer: {
        text: dungeonRun.mapData?.grid ? 
          `Atualmente na ${this.getBiomeName(dungeonRun.biome)} - Andar ${dungeonRun.currentFloor}` :
          "N√£o est√° em uma dungeon ativa",
      },
      timestamp: new Date().toISOString(),
    };
    
    return embed;
  },
  
  getTempInventory(dungeonRun) {
    // Invent√°rio tempor√°rio baseado no progresso da dungeon
    const baseItems = [
      { name: "Po√ß√£o de Vida", quantity: 3, type: "consumable", emoji: "üß™", description: "Restaura 50 HP" },
      { name: "Po√ß√£o de Mana", quantity: 2, type: "consumable", emoji: "üíô", description: "Restaura 30 Mana" },
      { name: "Pergaminho de Recall", quantity: 1, type: "consumable", emoji: "üìú", description: "Retorna √† entrada" },
    ];
    
    // Adicionar itens baseados no bioma atual
    if (dungeonRun.biome) {
      const biomeItems = {
        'CRYPT': [
          { name: "Osso Antigo", quantity: 2, type: "material", emoji: "ü¶¥", description: "Material de crafting" },
          { name: "Poeira Espectral", quantity: 1, type: "material", emoji: "üëª", description: "Componente m√°gico" }
        ],
        'VOLCANO': [
          { name: "Cristal de Fogo", quantity: 1, type: "material", emoji: "üî•", description: "Cristal ardente" },
          { name: "Obsidiana Pura", quantity: 3, type: "material", emoji: "‚ö´", description: "Material resistente" }
        ],
        'FOREST': [
          { name: "Erva Medicinal", quantity: 4, type: "material", emoji: "üåø", description: "Para po√ß√µes" },
          { name: "Seiva M√°gica", quantity: 2, type: "material", emoji: "üçØ", description: "Ingrediente raro" }
        ],
        'GLACIER': [
          { name: "Cristal de Gelo", quantity: 2, type: "material", emoji: "‚ùÑÔ∏è", description: "Nunca derrete" },
          { name: "Pele T√©rmica", quantity: 1, type: "material", emoji: "üß•", description: "Prote√ß√£o contra frio" }
        ],
        'RUINS': [
          { name: "Fragmento Antigo", quantity: 3, type: "material", emoji: "üè∫", description: "Rel√≠quia arqueol√≥gica" },
          { name: "Runa Gravada", quantity: 1, type: "material", emoji: "üóø", description: "Poder ancestral" }
        ],
        'ABYSS': [
          { name: "Ess√™ncia Sombria", quantity: 1, type: "material", emoji: "üåë", description: "Energia do vazio" },
          { name: "Fragmento Estelar", quantity: 1, type: "material", emoji: "‚≠ê", description: "Poder c√≥smico" }
        ]
      };
      
      if (biomeItems[dungeonRun.biome]) {
        baseItems.push(...biomeItems[dungeonRun.biome]);
      }
    }
    
    return baseItems;
  },
  
  getTempEquipment(playerClass) {
    const equipment = {
      'WARRIOR': {
        weapon: { name: "Espada de Ferro", emoji: "‚öîÔ∏è", stats: "+15 ATK" },
        armor: { name: "Armadura de Placas", emoji: "üõ°Ô∏è", stats: "+20 DEF" },
        accessory: { name: "Anel de For√ßa", emoji: "üíç", stats: "+5 ATK" }
      },
      'MAGE': {
        weapon: { name: "Cajado Arcano", emoji: "ü™Ñ", stats: "+12 ATK, +10 Mana" },
        armor: { name: "Robes M√≠sticos", emoji: "üëò", stats: "+10 DEF, +15 Mana" },
        accessory: { name: "Amuleto S√°bio", emoji: "üîÆ", stats: "+8 Mana" }
      },
      'ROGUE': {
        weapon: { name: "Adagas G√™meas", emoji: "üó°Ô∏è", stats: "+12 ATK, +5 VEL" },
        armor: { name: "Armadura de Couro", emoji: "ü¶∫", stats: "+15 DEF, +3 VEL" },
        accessory: { name: "Botas Sombrias", emoji: "üë¢", stats: "+8 VEL" }
      },
      'CLERIC': {
        weapon: { name: "Martelo Sagrado", emoji: "üî®", stats: "+10 ATK, +5 DEF" },
        armor: { name: "Vestes Divinas", emoji: "üëó", stats: "+18 DEF, +5 Mana" },
        accessory: { name: "S√≠mbolo Sagrado", emoji: "‚úùÔ∏è", stats: "+10 Mana" }
      }
    };
    
    return equipment[playerClass] || equipment['WARRIOR'];
  },
  
  formatEquipment(equipment) {
    return `**Arma:** ${equipment.weapon.emoji} ${equipment.weapon.name} (${equipment.weapon.stats})
**Armadura:** ${equipment.armor.emoji} ${equipment.armor.name} (${equipment.armor.stats})
**Acess√≥rio:** ${equipment.accessory.emoji} ${equipment.accessory.name} (${equipment.accessory.stats})`;
  },
  
  formatInventoryItems(items, page) {
    const itemsPerPage = 8;
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageItems = items.slice(startIndex, endIndex);
    
    if (pageItems.length === 0) {
      return "Invent√°rio vazio nesta p√°gina.";
    }
    
    const itemLines = pageItems.map(item => {
      const quantityText = item.quantity > 1 ? ` x${item.quantity}` : '';
      return `${item.emoji} **${item.name}**${quantityText}\n   *${item.description}*`;
    });
    
    const totalPages = Math.ceil(items.length / itemsPerPage);
    const pageInfo = totalPages > 1 ? `\n\nüìÑ P√°gina ${page}/${totalPages}` : '';
    
    return itemLines.join('\n\n') + pageInfo;
  },
  
  formatActiveSkills(playerClass) {
    const skills = {
      'WARRIOR': [
        { name: "Golpe Poderoso", emoji: "üí•", description: "Ataque devastador" },
        { name: "Defesa F√©rrea", emoji: "üõ°Ô∏è", description: "Reduz dano recebido" },
        { name: "Grito de Guerra", emoji: "üì¢", description: "Aumenta ATK temporariamente" }
      ],
      'MAGE': [
        { name: "Bola de Fogo", emoji: "üî•", description: "Dano m√°gico de fogo" },
        { name: "Escudo M√°gico", emoji: "üîÆ", description: "Prote√ß√£o arcana" },
        { name: "Raio de Gelo", emoji: "‚ùÑÔ∏è", description: "Congela o inimigo" }
      ],
      'ROGUE': [
        { name: "Ataque Furtivo", emoji: "üó°Ô∏è", description: "Dano cr√≠tico garantido" },
        { name: "Evas√£o", emoji: "üí®", description: "Evita pr√≥ximo ataque" },
        { name: "Veneno", emoji: "‚ò†Ô∏è", description: "Aplica dano cont√≠nuo" }
      ],
      'CLERIC': [
        { name: "Cura Divina", emoji: "‚ú®", description: "Restaura HP" },
        { name: "Ben√ß√£o", emoji: "üôè", description: "Aumenta todos os atributos" },
        { name: "Luz Sagrada", emoji: "‚òÄÔ∏è", description: "Dano contra mortos-vivos" }
      ]
    };
    
    const classSkills = skills[playerClass] || skills['WARRIOR'];
    return classSkills.map(skill => `${skill.emoji} **${skill.name}** - ${skill.description}`).join('\n');
  },
  
  getBiomeName(biome) {
    const names = {
      'CRYPT': 'Cripta Sombria',
      'VOLCANO': 'Vulc√£o Ardente',
      'FOREST': 'Floresta Perdida',
      'GLACIER': 'Geleira Eterna',
      'RUINS': 'Ru√≠nas Antigas',
      'ABYSS': 'Abismo Profundo'
    };
    return names[biome] || biome;
  },
  
  getClassName(playerClass) {
    const names = {
      'WARRIOR': 'Guerreiro',
      'MAGE': 'Mago',
      'ROGUE': 'Ladino',
      'CLERIC': 'Cl√©rigo'
    };
    return names[playerClass] || playerClass;
  }
};